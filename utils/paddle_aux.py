
# This file is generated by PaConvert ToolKit, please Don't edit it!
import paddle

def view(self, *args, **kwargs):
    if args:
        if len(args)==1 and isinstance(args[0], (tuple, list, str)):
            return paddle.view(self, args[0])
        else:
            return paddle.view(self, list(args))
    elif kwargs:
        return paddle.view(self, shape_or_dtype = list(kwargs.values())[0])

setattr(paddle.Tensor, 'view', view)

def min_class_func(self, *args, **kwargs):
    if 'other' in kwargs:
        kwargs['y'] = kwargs.pop('other')
        ret = paddle.minimum(self, *args, **kwargs)
    elif len(args)==1 and isinstance(args[0], paddle.Tensor):
        ret = paddle.minimum(self, *args, **kwargs)
    else:
        if 'dim' in kwargs:
            kwargs['axis'] = kwargs.pop('dim')

        if 'axis' in kwargs or len(args) >= 1:
            ret = paddle.min(self, *args, **kwargs), paddle.argmin(self, *args, **kwargs)
        else:
            ret = paddle.min(self, *args, **kwargs)

    return ret

def max_class_func(self, *args, **kwargs):
    if 'other' in kwargs:
        kwargs['y'] = kwargs.pop('other')
        ret = paddle.maximum(self, *args, **kwargs)
    elif len(args)==1 and isinstance(args[0], paddle.Tensor):
        ret = paddle.maximum(self, *args, **kwargs)
    else:
        if 'dim' in kwargs:
            kwargs['axis'] = kwargs.pop('dim')

        if 'axis' in kwargs or len(args) >= 1:
            ret = paddle.max(self, *args, **kwargs), paddle.argmax(self, *args, **kwargs)
        else:
            ret = paddle.max(self, *args, **kwargs)

    return ret

setattr(paddle.Tensor, "min", min_class_func)
setattr(paddle.Tensor, "max", max_class_func)

def transpose_aux_func(dims,dim0, dim1):
    perm = list(range(dims))
    perm[dim0], perm[dim1] = perm[dim1], perm[dim0]
    return perm

def split(x, num_or_sections, axis=0):
    if isinstance(num_or_sections, int):
        return paddle.split(x, x.shape[axis]//num_or_sections, axis)
    else:
        return paddle.split(x, num_or_sections, axis)


def add(self, *args, **kwargs):
    if 'other' in kwargs:
        y = kwargs['other']
    elif 'y' in kwargs:
        y = kwargs['y']
    else:
        y = args[0]

    if 'alpha' in kwargs:
        alpha = kwargs['alpha']
        if alpha != 1:
            if not isinstance(y, paddle.Tensor):
                y = paddle.to_tensor(alpha * y)
            else:
                y = alpha * y
    else:
        if not isinstance(y, paddle.Tensor):
            y = paddle.to_tensor(y)

    return paddle.add(self, y)

setattr(paddle.Tensor, 'add', add)



# This file is generated by PaConvert ToolKit, please Don't edit it!
import paddle

def mul(self, *args, **kwargs):
    if 'other' in kwargs:
        y = kwargs['other']
    elif 'y' in kwargs:
        y = kwargs['y']
    else:
        y = args[0]

    if not isinstance(y, paddle.Tensor):
        y = paddle.to_tensor(y)

    return paddle.multiply(self, y)

setattr(paddle.Tensor, 'mul', mul)
setattr(paddle.Tensor, 'multiply', mul)

def sub(self, *args, **kwargs):
    if 'other' in kwargs:
        y = kwargs['other']
    elif 'y' in kwargs:
        y = kwargs['y']
    else:
        y = args[0]

    if 'alpha' in kwargs:
        alpha = kwargs['alpha']
        if alpha != 1:
            if not isinstance(y, paddle.Tensor):
                y = paddle.to_tensor(alpha * y)
            else:
                y = alpha * y
    else:
        if not isinstance(y, paddle.Tensor):
            y = paddle.to_tensor(y)

    return paddle.subtract(self, y)

setattr(paddle.Tensor, 'sub', sub)
setattr(paddle.Tensor, 'subtract', sub)

def transpose_aux_func(dims,dim0, dim1):
    perm = list(range(dims))
    perm[dim0], perm[dim1] = perm[dim1], perm[dim0]
    return perm

def div(self, *args, **kwargs):
    if 'other' in kwargs:
        y = kwargs['other']
    elif 'y' in kwargs:
        y = kwargs['y']
    else:
        y = args[0]

    if not isinstance(y, paddle.Tensor):
        y = paddle.to_tensor(y)

    res = paddle.divide(self, y)

    if 'rounding_mode' in kwargs:
        rounding_mode = kwargs['rounding_mode']
        if rounding_mode=='trunc':
            res = paddle.trunc(res)
        elif rounding_mode=='floor':
            res = paddle.floor(res)

    return res

setattr(paddle.Tensor, 'div', div)
setattr(paddle.Tensor, 'divide', div)
